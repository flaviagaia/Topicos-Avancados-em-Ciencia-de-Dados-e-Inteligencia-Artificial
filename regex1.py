# -*- coding: utf-8 -*-
"""Regex1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N7I4OPebdMOPY-Kcz4MF055c0mxt9w3Y

## Expressões Regulares

Este notebook tem o objetivo de apresentar e explorar a sintaxe da construção de expressões regulares.

Relembrando que uma Expressão Regular é a representação do que se busca encontrar em um texto. Sendo o objeto procurado uma sequência de caracteres. Então o objetivo sempre será montar essa **expressão** ou **padrão** (será muito utilizada a nomeclatura de "*regex*") que deverá ser confrontado com o texto.

As Expressões Regulares ocorrem em várias linguagens de programação como Java, Perl, Javascript, etc. Para o Python existe uma [biblioteca](https://docs.python.org/3/library/re.html) específica que entende os padrões e executa sobre o texto.

O primeiro passo é a expressão mais simples:
"""

# Importação da biblioteca 
import re

regex= 'a'

texto="Flamengo"

re.sub(regex,'#', texto)

"""A saída da operação indica que o padrão foi encontrado (deu *match*) e apresenta a localização.

No caso de não localizar, a saída é vazia.
"""

regex='b'
re.search(regex, texto)

"""A busca por um caractere simples equivale ao operador *in* do Python. """

print('b' in texto, 'a' in texto)

"""Da mesma forma, buscar mais que um caractere:"""

regex = 'am'
re.search(regex, texto)

"""Vamos explorar os metacaracteres:

## .  Caracter Curinga
"""

regex='a.'
re.search(regex, texto)

regex='a..'
re.search(regex, texto)

"""E se o objetivo for pegar um ponto final??

Esse problema ocorre com todos os metacaracteres. Quando for utilizar o valor literal, deve-se acrescentar o '\'.
"""

texto='O Flamengo goleou o time adversário.'
regex='o\.'
re.search(regex, texto)

"""Sem o \ o match seria diferente:"""

regex='o.'
re.search(regex, texto)

"""Se o interesse for buscar um caractere dentro de uma lista de opções. Por exemplo, para fazer uma busca pelas vogais *a*, *e*, *i*, *o* ou *u*, a expressão regular equivalente seria '\[aeiou\]'. Da mesma forma, caso queiramos fazer uma busca pelas palavras *da*, *de* ou *do*, a expressão regular usada seria 'd\[aeo\]' (um caractere *d* seguido de um *a*, *e* ou *o*. """

texto='Bob Nelson'
regex=r'[aeiou]'
re.search(regex, texto)

"""o método *search* devolve somente a primeira ocorrência. Diferente do ***findall***."""

texto='Bob Nelson'
regex=r'[aeiou]'
re.findall(regex, texto)

texto='Bob Nelson da Silva de Sousa'
regex=r'd[a-u]'
re.findall(regex, texto)

"""Uma classe de caracteres também pode ser representado por um intervalo de caracteres. Por exemplo, *'\[0-9\]'* representa qualquer dígito e *'\[A-F\]'* representa uma letra de A a F. As classes também podem ser combinadas na mesma expressão, tal como em *'\[0-9a-zA-Z\]'*, que representa qualquer digito ou letra do alfabeto (maiúscula ou minúscula)."""

texto='Bob Nelson foi à praia a 25d.'
regex=r'[0-9][0-9][A-Za-z]'
re.findall(regex, texto)

texto='Bob Nelson foi à praia a 25d.'
regex=r'[0-9][0-9]\w'
re.findall(regex, texto)

"""Uma classe pode ser negada por meio do caractere ^, de forma a representar qualquer caractere que não tenha sido informado entre colchetes. Por exemplo, a classe *\[^0-9\]* representa qualquer caractere que não seja um dígito e a classe *\[^AEIOUaeiou\] qualquer caractere que não seja uma vogal."""

texto='Bob Nelson foi à praia a 25d.'
regex=r'[^0-9][A-Za-z]'
re.findall(regex, texto)

"""No caso acima, foram apresentadas as duplas de caracteres que não continham número como o primeiro elemento, e o segundo seria uma letra.

Existe uma série de classes que são frequentemente utilizadas, como por exemplo, a classe de dígitos (*'\[0-9\]'*) ou de letras (*'\[A-Za-z\]'*). Para simplificar o uso destas classes, existem algumas representações predefinidas que podem ser utilizadas.

    \d = [0-9]          : dígitos
    \D = [^0-9]         : não dígitos
    \s = [ \t\n\r\f\v]  : espaços em branco (espaço, tabulação, quebras de linha, etc.)
    \S = [^ \t\n\r\f\v] : caracteres que não são espaços em branco
    \w = [a-zA-Z0-9_]   : caracteres de palavras (letras, números e underscore)
    \W = [^a-zA-Z0-9_]  : caracteres que não são usados em palavras
"""

texto='Bob Nelson foi à praia a 25d.'
regex=r'\d\d\w'
re.findall(regex, texto)

texto='Bob Nelson foi à praia a 25d.'
regex=r'\w\w\w\s\w\w\w\w\w\w'
re.findall(regex, texto)